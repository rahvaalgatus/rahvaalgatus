#!/usr/bin/env node
process.title = "rahvaalgatus/web"

if (process.env.CONFIG) require("root").config =
	require("root/lib/config").read(process.env.CONFIG)
if (process.env.DB)
	require("root").sqlite = require("root/lib/sqlite")(process.env.DB)

var _ = require("root/lib/underscore")
var Url = require("url")
var Express = require("root/lib/express")
var Config = require("root").config
var HttpError = require("standard-http-error")
var I18n = require("root/lib/i18n")
var MediaType = require("medium-type")
var {runServer} = require("root/lib/http")
var redirect = require("root/lib/redirect")
var {ENV} = process.env
var PORT = process.env.PORT || 3000
var PARLIAMENT_SITE_HOSTNAME = Url.parse(Config.parliamentSiteUrl).hostname
var LOCAL_SITE_HOSTNAME = Url.parse(Config.localSiteUrl).hostname
var ERROR_TYPE = new MediaType("application/vnd.rahvaalgatus.error+json")
var app = module.exports = Express.new()

if (ENV == "development") {
	// Set CORS for subsites like riigikogu.rahvaalgatus.test and others.
	app.use(Express.static(__dirname + "/../public", {
		setHeaders: (res) => res.setHeader("Access-Control-Allow-Origin", "*")
	}))

	app.use(require("morgan")("dev"))
}

app.use(function(req, _res, next) {
	if (req.hostname == PARLIAMENT_SITE_HOSTNAME) req.government = "parliament"
	else if (req.hostname == LOCAL_SITE_HOSTNAME) req.government = "local"
	else req.government = null
  next()
})

app.use(require("cookie-parser")(Config.cookieSecret))
app.use(require("root/lib/middleware/i18n_middleware"))
app.use(require("body-parser").urlencoded({extended: true, limit: "1MB"}))
app.use(require("body-parser").json({limit: "1MB"}))
app.use(require("root/lib/middleware/multipart_form_middleware")())
app.use(require("root/lib/middleware/method_override_middleware"))
app.use(require("root/lib/middleware/accept_middleware"))
app.use(require("root/lib/middleware/request_type_middleware"))
app.use(require("root/lib/middleware/extension_middleware"))

app.use(function(_req, res, next) {
	res.setHeader("Cache-Control", "no-cache")
  next()
})

app.use(require("root/lib/middleware/csrf_middleware"))
app.use(require("flash-fiction/express"))
app.use(require("root/lib/middleware/session_middleware"))

_.each({
	"/topics": "/",
	"/topics/create1": "/initiatives/new",
	"/votings": "/",
	"/discussions": "/",
	"/goodpractice": "/about",
	"/topics/:id": "/initiatives/:id",
	"/topics/:id/discussion": "/initiatives/:id/discussion",
	"/topics/:id/vote": "/initiatives/:id",
	"/topics/:id/events": "/initiatives/:id/events",
	"/topics/:id/events/create": "/initiatives/:id/events/new",
	"/initiatives/:id/events/create": "/initiatives/:id/events/new",
	"/topics/:id/votes/*": "/initiatives/:id",
	"/initiatives/:id/discussion": "/initiatives/:id",
	"/initiatives/:id/vote": "/initiatives/:id",
	"/initiatives/:id/events": "/initiatives/:id",
	"/support_us": "/donate",
	"/session/new": "/sessions/new"
}, (to, from) => app.get(from, redirect(302, to)))

app.get("/digiallkiri", usePath.bind(null, "/demo-signatures"))
app.get("/donate", usePath.bind(null, "/donations/new"))
app.get("/donated", usePath.bind(null, "/donations/created"))

_.each({
	"/": require("root/controllers/home_controller").router,
	"/donations": require("root/controllers/donations_controller").router,
	"/initiatives": require("root/controllers/initiatives_controller").router,
	"/subscriptions": require("root/controllers/subscriptions_controller").router,
	"/sessions": require("root/controllers/sessions_controller").router,
	"/user": require("root/controllers/user_controller").router,

	"/initiative-events":
		require("root/controllers/initiative_events_controller").router,
	"/demo-signatures":
		require("root/controllers/demo_signatures_controller").router
}, (router, path) => app.use(path, router))

if (ENV == "development" || ENV == "staging") {
	app.use("/admin", require("root/controllers/admin_controller"))
}

app.use(function(_req, _res, next) { next(new HttpError(404)) })
app.use(require("root/lib/middleware/error_reporter_middleware"))

app.use(require("root/lib/middleware/error_handler_middleware").bind(null,
	function(err, req, res) {
	// The error could've originated from middleware before req.t is set.
	var t = req.t || I18n.t.bind(null, "et")

	var type = accepts([
		new MediaType("text/html"),
		ERROR_TYPE,
		new MediaType("application/json")
	])

	// If the client accepts JSON, for now, give it an error type back. Responding
	// with 406 Not Acceptable could be more _to spec_, but that could be
	// misleading given it's the error response we're having trouble with, not
	// the original request.
	if (type == null && isJsony(res.getHeader("Content-Type"))) type = ERROR_TYPE

	switch (type && type.name) {
		case "application/vnd.rahvaalgatus.error+json":
		case "application/json":
			res.setHeader("Content-Type", type)
			res.end(JSON.stringify(err instanceof HttpError ? err : {
				code: 500,
				message: t("500_TITLE"),
				description: t("500_BODY")
			}))
			break

		default:
			res.setHeader("Content-Type", "text/html")

			if (err instanceof HttpError) {
				if (err.code == 401) {
					res.flash("error", t("401_TITLE"))
					res.render("sessions/create_page.jsx")
				}
				else res.render("error_page.jsx", {
					title: t(err.code + "_TITLE") || "",
					body: err.description || t(err.code + "_BODY") || err.message
				})
			}
			else res.render("error_page.jsx", {
				title: t("500_TITLE"),
				body: t("500_BODY")
			})
	}

	function accepts(types) {
		if (req.accept) for (var i = 0; i < types.length; ++i) {
			if (req.accept.some(types[i].match.bind(types[i]))) return types[i]
		}

		return null
	}

	function isJsony(type) {
		if (type == null) return false
		type = new MediaType(type)
		return type.name == "application/json" || type.suffix == "json"
	}
}))

if (module.parent) return
runServer(app, PORT)

function usePath(path, req, _res, next) {
	req.url = path + req.url.replace(/^[^?]+/, "")
	next()
}
